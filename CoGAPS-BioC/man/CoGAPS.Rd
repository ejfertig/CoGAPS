% Generated by roxygen2 (4.0.1): do not edit by hand
\name{CoGAPS}
\alias{CoGAPS}
\title{\code{CoGAPS} calls the C++ MCMC code through gapsRun and performs Bayesian
matrix factorization returning the two matrices that reconstruct
the data matrix and then calls calcCoGAPSStat to estimate gene set
activity with nPerm set to 500}
\usage{
CoGAPS(data, unc, GStoGenes, nFactor = "7", nEquil = 1000, nSample = 1000,
  nOutR = 1000, output_atomic = "false", simulation_id = "simulation",
  plot = TRUE, nPerm = 500, alphaA = "0.01", nMaxA = "100000",
  max_gibbmass_paraA = "100.0", lambdaA_scale_factor = "1.0",
  alphaP = "0.01", nMaxP = "100000", max_gibbmass_paraP = "100.0",
  lambdaP_scale_factor = "1.0")
}
\arguments{
\item{data}{data matrix}

\item{unc}{uncertainty matrix (std devs for chi-squared of Log Likelihood)}

\item{GStoGenes}{data.frame or list with gene sets}

\item{nFactor}{number of patterns (basis vectors, metagenes)}

\item{simulation_id}{name to attach to atoms files if created}

\item{nEquil}{number of iterations for burn-in}

\item{nSample}{number of iterations for sampling}

\item{nOutR}{how often to print status into R by iterations}

\item{output_atomic}{whether to write atom files (large)}

\item{alphaA,}{alphaP sparsity parameters for A and P domains}

\item{max_gibbmass_paraA(P)}{limit truncated normal to max size}

\item{nMaxA,}{nMaxP PRESENTLY UNUSED, future = limit number of atoms}

\item{lambdaA(P)_scale_factor}{lambda factor in penalized likelihood}
}
\description{
\code{CoGAPS} calls the C++ MCMC code through gapsRun and performs Bayesian
matrix factorization returning the two matrices that reconstruct
the data matrix and then calls calcCoGAPSStat to estimate gene set
activity with nPerm set to 500
}

